POC　作成手順
（目次https://thinkit.co.jp/free/tech/4/3/1.html）」
１．	Jasportリポート単体を作成
https://thinkit.co.jp/free/tech/4/3/1.html
DatasourceはPreview時切り替え可能です。

２．JavaアプリケーションからJasportリポートを呼び出す
　　2.1　ReportプロジェクトからJasportを呼び出す
　　　　（Source folderもbuild pathに）
　　2.2　普通のJava ProjectからJasportリポートを呼び出す

http://foolprogrammer.blogspot.com/2015/01/javajasperreport_29.html
で続行
JavaアプリケーションでJasperReportを出力する方法

https://www.codeflow.site/ja/article/java__javamail-api-sending-email-via-gmail-smtp-example

PDFの代わりに直接プリンターへの出力
https://qiita.com/nakani1210/items/18b0e80317c35f6e6756

http://jasperreports.sourceforge.net/sample.reference/printservice/index.html
PrintServiceReport


https://thinkit.co.jp/free/tech/4/4/1.html
https://community.jaspersoft.com/wiki/working-javabeans-data-adapter-tibco-jaspersoft-studio
Log4j2実作
DB接続POC（SQL ServerとAzure)
EclipseとGitHubの連携
https://qiita.com/komikcomik/items/207794a332aa581c22d4
Spring batch Framework i.e.,https://www.toptal.com/spring/spring-batch-tutorial?utm_campaign=blog_post_spring_batch_tutorial&utm_medium=email&utm_source=blog_subscribers
Jaspers
Try netsh.exe winhttp show proxy command this will print the proxy settings
http://buki.io/?p=38
https://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-getting-the-required-dependencies-with-maven/
package com.SQLServerJDBC;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class SQLDatabaseConnection {
    // Connect to your database.
    // Replace server name, username, and password with your credentials
    public static void main(String[] args) {
	//jdbc:sqlserver://localhost\SQLEXPRESS:52188
        String connectionUrl =
                "jdbc:sqlserver://localhost\\SQLEXPRESS:0;"
                        + "database=FriendOrganizerDB;"
                        + "user=newtest;"
                        + "password=newtest;"
                        //+ "encrypt=true;"
                        + "trustServerCertificate=false;"
                        + "loginTimeout=30;";
        ResultSet resultSet = null;
        String insertSql = "INSERT INTO [dbo].[Friend] (FirstName ,LastName,Email) VALUES "
                + "('NewBike', 'BikeNew', 'ad@fs.com');";
        try (Connection connection = DriverManager.getConnection(connectionUrl);
                //Statement statement = connection.createStatement();
        	PreparedStatement prepsInsertProduct = connection.prepareStatement(insertSql, Statement.RETURN_GENERATED_KEYS);
        	) 
        {
            // Code here.
            System.out.println("Success!");
            // Create and execute a SELECT SQL statement.
            //String selectSql = "SELECT count(*) from [dbo].[Friend]";
            //resultSet = statement.executeQuery(selectSql);
            prepsInsertProduct.execute();
            // Retrieve the generated key from the insert.
            resultSet = prepsInsertProduct.getGeneratedKeys();

            // Print the ID of the inserted row.
            while (resultSet.next()) {
                System.out.println("Generated: " + resultSet.getString(1));
            }
            // Print results from select statement
//            while (resultSet.next()) {
//                System.out.println(resultSet.getString(1));
//            }
        }
        // Handle any errors that may have occurred.
        catch (SQLException e) {
            e.printStackTrace();
            System.out.println("failed");
        }
    }
}

